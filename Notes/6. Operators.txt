Python Basics & Scripting
Duration: 15 Days

Day 2:

1. Introduction
 History and Overview   -------------------- Completed
 Python setup  ----------------------------- Completed
 Python data types and variables ----------- Completed
 Operators
 Expressions
 Statements and loops


Escape Characters:
In String literals we can use esacpe characters to associate a special meaning.
        1)\n==>New Line
		2)\t===>Horizontal tab
		3)\r ==>Carriage Return
		4)\b===>Back space
		5)\f===>Form Feed
		6)\v==>Vertical tab
		7)\'===>Single quote
		8)\"===>Double quote
		9)\\===>back slash symbol
		
	Eg:	
		>>> s="sun\nlight"
        >>>  print(s)  
		>>> s="sun\tlight"
		>>> s
		>>> s="This is " symbol"   #SyntaxError: invalid syntax
		>>> s="This is \" symbol"
		>>> s='This is \" symbol'
==========================================================================================================
Constants:

Values never change/ fixed value.
In java final int x =10;
        x = 11;   # compiler Error : cant assign values to final value 
		
However,Constants concept is not applicable in Python.( no keyword such as final in python)
But it is convention to use only uppercase characters if we don’t want to change value.
 MAX_VALUE=10
It is just convention but we can change the value.
Its just a developers responsibility to not to change such values.

=========================================================================================================

Operators: symbol that performs certain operations
  Python provides the following set of operators
	1.Arithmetic Operators
	2.Relational Operators or Comparison Operators
	3.Logical operators
	4.Bitwise oeprators
	5.Assignment operators
	6.Special operators
 
1. Arithmetic Operators:
	+ ==>Addition
	- ==>Subtraction
	* ==>Multiplication
	/ ==>Division operator (result of division operator is float value)
	% ===>Modulo operator  (remainder)
	// ==>Floor Division operator  (if arg are int result is also int if arg are float result is float)
	                                (before nearest number)
	** ==>Exponent operator or power operator
Eg: test.py:
    a=10
	b=2
	print('a+b=',a+b)  #12
	print('a-b=',a-b)  #8
    print('a*b=',a*b)  #20
	print('a/b=',a/b)   #5.0  
    print('a//b=',a//b)  #5
	print('a%b=',a%b)	#0
    print('a**b=',a**b)  #100	
	
Eg:
    a=10.5
	b=2
	print('a+b=',a+b)  #12.5
	print('a-b=',a-b)  #8.5
    print('a*b=',a*b)  #21.0
	print('a/b=',a/b)   #5.25  
    print('a//b=',a//b)  #5.0 ( most nearest int value in form of float is taken)
	print('a%b=',a%b)	#0.5
    print('a**b=',a**b)  #110.25
		
Eg:
	10/2==>5.0
	10//2==>5
	10.0/2===>5.0
	10.0//2===>5.0
	
	Division / operator always performs floating point arithmetic. Hence it will always returns float value.
	But Floor division (//) can perform both floating point and integral arithmetic.
	  If arguments are int type then result is int type.
	  If atleast one argument is float type then result is float type.

We can use +,* operators for str type also.
+====>String concatenation operator
* ===>String multiplication operator
If we want to use + operator for str type,
	then compulsory both arguments should be str type only otherwise we will get error.

		eg: 
		>>>"rain"+10    #TypeError: must be str, not int
		>>> "rain"+"10"  #'rain10'
		
If we use * operator for str type, 
	then compulsory one argument should be int and other argument should be str type. (order is not important)
	   >>>2*"rain"   #'rainrain'
	   >>>"rain"*2	  #'rainrain'
	   >>>2.5*"rain" ==>TypeError: can't multiply sequence by non-int of type 'float' 
	   >>>"rain"*"rain"==>TypeError: can't multiply sequence by non-int of type 'str'
	
For any number x, 
     x/0 , x//0 and x%0 always raises "ZeroDivisionError" 
	 eg:
		>>> 10/0   #"ZeroDivisionError"
		>>> 10.0/0 #"ZeroDivisionError"
		
========================================================================================================================
Relational Operators:
>,>=,<,<= 

Eg:
    a=10
	b=20
	print("a > b is ",a>b)  #a > b is False
	print("a >= b is ",a>=b) #a >= b is  False
    print("a < b is ",a<b)  #a < b is True
	print("a <= b is ",a<=b)   #a <= b is True 
	
We can apply relational operators for str types also . 
  not based on length checks alphabetical order. (b>a)
  smaller letter> capital letter based on ASCII Value / unicode value A = 65 and a = 97  ( In java its an error)
  comparision takes place character by character. checks first letter matches it goes for next and soon. 

Eg:
    a="star"
	b="star"
	print("a > b is ",a>b)  #a > b is False
	print("a >= b is ",a>=b) #a >= b is  True
    print("a < b is ",a<b)  #a < b is False
	print("a <= b is ",a<=b)   #a <= b is True 
	
  print(10>'star')   #TypeError: '>' not supported between instances of 'int' and 'str'
  
	a="True"   Internally considers True as 1 and False as 0
	b="False"
	print("a > b is ",a>b)  #a > b is True
	print("a >= b is ",a>=b) #a >= b is  True
    print("a < b is ",a<b)  #a < b is False
	print("a <= b is ",a<=b)   #a <= b is False 
	
	a="True"  # one str and other bool
	b=False
	a> b # TypeError
	
	
	Chaining of relational operators is possible.
	In the chaining, if all comparisons returns True then only result is True.
	If atleast one comparison returns False then the result is False
	
	10<20 ==>True
	10<20<30 ==>True
	10<20<30<40 ==>True
	10<20<30<40>50 ==>False
	
=======================================================================================================
equality operators:    (= is assignment operator)
== , !=

We can apply these operators for any type even for incompatible types also.
   >>> 10==20        	#False
   >>> 10!= 20       	#True
   >>> 10==True      	#False
   >>> False==False     #True
   >>> "rain"=="rain"   #True
   >>> 10=="rain"       #False
   
Chaining concept is applicable for equality operators
If atleast one comparison returns False then the result is False. otherwise the result is True.
eg
   >>> 10==20==30==40   #False
   >>> 10==10==10==10	#True
 case sensitive  
===================================================================================================================

Logical Operators:

and, or ,not

We can apply for all types.

For boolean types behaviour:(returns Boolean)
	and ==>If both arguments are True then only result is True 
	or ====>If atleast one arugemnt is True then result is True 
	not ==>complement
		Eg
		True and False ==>False 
		True or False ===>True
		not False  ==>True
For non-boolean types behaviour: (need not be boolean can be a number also)
	0 means False
	non-zero means True
	empty string is always treated as False
	
    x and y: 
		  ==>if x is evaluates to false(ie value equals zero) return x otherwise return y 
			Eg:
				10 and 20    10 is non zero ==>True so returns 20
				0 and 20     0===>False so returns 0

		   If first argument is zero then result is zero otherwise result is y

	
	x or y:
	      If x evaluates to True then result is x otherwise result is y
			Eg:
				10 or 20 ==> 10
				0 or 20 ==> 20
				
	not x:
		 If x is evalutates to False then result is True otherwise False 
		 not 10  ==>False
		 not 0 ==>True 
		 
	Eg :
   >>> "rain" and "rainbow" ==>rainbow      	
   >>>  "" and "rain" ==>""       	
   >>> "rain" and ""   ==>""    	
   >>> "" or "rain" ==>"rain"     
   >>> "rain" or ""==>"rain"  
   >>> not ""==>True   
   >>> not "rain" ==>False   
   >>> 10 or 10/0 ===> 10
   >>>  0 0r 10/0 ====> ZeroDivisionError
   
===============================================================================================

Bitwise Operators:
&,|,^,~,<<,>>	
We can apply these operators bitwise.
These operators are applicable only for int and boolean types.
By mistake if we are trying to apply for any other type then we will get Error

	print(4&5) ==>valid 
	print(10.5 & 5.6) ==>TypeError: unsupported operand type(s) for &: 'float' and 'float'
	print(True & True) ==>valid
	
& ==> If both bits are 1 then only result is 1 otherwise result is 0
| ==> If atleast one bit is 1 then result is 1 otherwise result is 0
^ ==>If bits are different then only result is 1 otherwise result is 0
~ ==>bitwise complement operator 1==>0  & 0==>1
<< ==>Bitwise Left shift
>> ==>Bitwise Right Shift


print(4&5) ==>4 (internally by default binary values are compared)
print(4|5)	==>5
print(4^5)	==>1

bitwise complement operator(~):
We have to apply complement for total bits. 
print(~5) ==>-6

The most significant bit acts as sign bit. 
0 value represents +ve number where as 1 represents -ve value.
positive numbers will be repesented directly in the memory 
where as -ve numbers will be represented indirectly in 2's complement form.


Shift Operators:

<< Left shift operator

After shifting the empty cells we have to fill with zero 

print(10<<2)==>40
  
  0	0	0	0	1	0	1	0
  0	0	1	0	1	0	0	0
  
>> Right Shift operator

After shifting the empty cells we have to fill with sign bit.( 0 for +ve and 1 for -ve) 

print(10>>2) ==>2

0	0	0	0	1	0	1	0
0	0	0	0	0	0	1	0

We can apply bitwise operators for boolean types also 

print(True & False) ==>False
print(True | False) ===>True 
print(True ^ False) ==>True 
print(~True)	==>-2
print(True<<2)	==>4
print(True>>2)	==>0

  
Assignment Operators:
We can use assignment operator to assign value to the variable.
Eg:
x=10
We can combine asignment operator with some other operator to form compound assignment operator.
 x+=10 ====> x = x+10
 
The following is the list of all possible compound assignment operators in Python

+=
-=
*=
/=
%=
//=
**= &=
|=
^=
>>=
<<=

	x=10
	x+=20
	print(x) ==>30  
	
	x=10
	x&=5
	print(x) ==>0

===========================================================================================

Ternary Operator:

Syntax:
x = firstValue if condition else secondValue
If condition is True then firstValue will be considered else secondValue will be considered.
		a,b=10,20
        print(x)   #30
    
 Read two numbers from the keyboard and print minimum value

1) a=int(input("Enter First Number:"))
2) b=int(input("Enter Second Number:"))
3) min=a if a<b else b
4) print("Minimum Value:",min)
Output:
Enter First Number:10 Enter Second Number:30 Minimum Value: 10

Note: Nesting of ternary operator is possible.

 Program for minimum of 3 numbers
  min=a if a<b and a<c else b if b<c else c
  
  Program for maximum of 3 numbers
  max=a if a>b and a>c else b if b>c else c
  
====================================================================================================

Python defines the following 2 special operators

1.Identity Operators
2. Membership operators

1. Identity Operators

We can use identity operators for address comparison. 
2 identity operators are available
	is
	is not
	x is y returns True if both x and y are pointing to the same object
    x is not y returns True if both x and y are not pointing to the same object 
	
1)	a=10
2) b=10
3) print(a is b)	True
4) x=True
5) y=True
6) print( x is y)	True

a="durga"
b="durga"
print(id(a))
print(id(b))
print(a is b)

list1=["one","two","three"]
list2=["one","two","three"]
print(id(list1))
print(id(list2))
print(list1 is list2) False
print(list1 is not list2) True
print(list1 == list2) True


We can use is operator for address comparison 
  where as == operator for content comparison
  
  
2.Membership operators:
We can use Membership operators to check whether the given object present in the given collection.
(It may be String,List,Set,Tuple or Dict)
in  Returns True if the given object present in the specified Collection
not in  Retruns True if the given object not present in the specified Collection 

1)x="hello learning Python is very easy!!!"
print('h' in x) True
print('d' in x) True
print('d' not in x)	True
print('Python' in x)   True

 list1=["sunny","bunny","chinny","pinny"]
  print("sunny" in list1) True
  print("tunny" in list1) False
  print("tunny" not in list1) True



Operator Precedence:
If multiple operators present then which operator will be evaluated first is decided by operator precedence.
The following list describes operator precedence in Python 
	()  Parenthesis
	**  exponential operator
	~,-  Bitwise complement operator,unary minus operator
	*,/,%,//  multiplication,division,modulo,floor division
	+,-  addition,subtraction
	<<,>>  Left and Right Shift 
	&  bitwise And
	^  Bitwise X-OR
	|  Bitwise OR
	>,>=,<,<=, ==, != ==>Relational or Comparison operators
	=,+=,-=,*=... ==>Assignment operators 
	is , is not  Identity Operators
	in , not in  Membership operators 
	not  Logical not
	and  Logical and 
	or  Logical or	
		Eg:
				a=30
				b=20 
				c=10
				d=5 print((a+b)*c/d) 
				print((a+b)*(c/d)) 
				print(a+(b*c)/d)	
Evaluate expressions:
>>> 3/2*4+3+(10/5)**3-2
>>> 3/2*4+3+2.0**3-2
>>> 3/2*4+3+8.0-2
>>> 1.5*4+3+8.0-2
>>> 6.0+3+8.0-2
>>> 15.0

eval() function should pass expression as string then only it will evaluate or else returns TypeError 

