Python Basics & Scripting
Duration: 15 Days

1. Introduction--------------completed
2. Python Data Structures----completed
3. Methods and Functions 
		 Basics of python functions
		 Logic with python functions
		 Interactions between python functions
		 Python Methods
		 Lambda expressions, map, reduce and filter
		 Coding exercise 

Day 4  12 june 2021

3. Methods and Functions :

python functions:
   If a group of statements is repeatedly required 
	then it is not recommended to write these statements 
	everytime seperately.
   We have to define these statements as a single unit 
	   and we can call that unit any number of times 
	   based on our requirement without rewriting.
This unit is nothing but function.
The main advantage of functions is code Reusability.
Note: In other languages functions are known as methods
,procedures,subroutines etc 

Any function which is defined in a class
they are called methods

Python supports 2 types of functions
1.Built in Functions
2.User Defined Functions

1.Built in Functions:
The functions which are coming along with
 Python software automatically,
	are called built in functions or pre defined functions
Eg: id() type() input() eval()etc..


We can find help for any module by using help() function 

import math
help(math)

from math import *
print(sqrt(4))
print(ceil(10.1))
print(floor(10.1))
print(fabs(-10.6))
print(fabs(10.6))

Working with random module:
This module defines several functions 
to generate random numbers.
We can use these functions while developing games,
in cryptography and to generate random numbers 
on fly for authentication.

1.random() function:
This function always generate 
some float value between 0 and 1 ( not inclusive)
0<x<1

from random import *
for i in range(10):
    print(random())
	
2.randint() function:
To generate random integer beween 
two given numbers(inclusive) 

from random import *
for i in range(10):
    print(randint(1, 100))
	
3.uniform():
It returns random float values between
 2 given numbers(not inclusive) 

from random import *
for i in range(10):
    print(uniform(1, 10))

random() ===>in between 0 and 1 (not inclusive)
randint(x,y)	==>in between x and y ( inclusive) 
uniform(x,y) ==> in between x and y ( not inclusive)

4.randrange([start],stop,[step])
returns a random number 
from range start<= x < stop
start argument is optional and default value is 0 
step argument is optional and default value is 1

randrange(10)-->generates a number from 0 to 9 
randrange(1,11)-->generates a number from 1 to 10 
randrange(1,11,2)-->generates a number from 1,3,5,7,9

from random import *
for i in range(10):
    print(randrange(10))
	print(randrange(1, 11))
	print(randrange(1, 11, 2))
	
5.choice() function:
It wont return random number.
It will return a random object from the given list or tuple. 

from random import *
list = ["sun", "star", "moon", "rain"]
for i in range(10):
    print(choice(list))


Finding members of module by using dir() function:
Python provides inbuilt function dir() 
to list out all members of current module or a specified module.

dir() ===>To list out all members of current module 
dir(moduleName)==>To list out all members of specified module

x = 10
y = 20


def f1():
    print("Hello")

    
print(dir())
print(dir(math))


2.User Defined Functions:
The functions which are developed by programmer 
	explicitly according to business requirements 
	are called user defined functions.
	
# Syntax to create user defined functions:
# def	function_name(parameters) :
# 	""" doc string"""
# 	----
# 	-----
# 	return value	

While creating functions we can use 2 keywords
1.def (mandatory)
2.return (optional)

Eg Write a function to print Hello
test.py:

def wish():
    print("Hello Good Morning")

    
wish()
wish()
wish()

------------------------------
Parameters
  Parameters are inputs to the function. 
  If a function contains parameters,
  then at the time of calling,
    compulsory we should provide values 
	 otherwise,otherwise we will get error.
Write a function to take name of the student
 as input and print wish message by name.
------------------------------------------------- 
def wish(name):
    print("Hello", name, " Good Morning")


wish("Rajasree")
wish("Anu")
====================================================
Write a function to take number as input 
and print its square value
  
def square(number):
    print("The Square of", number ,"is", number*number)


square(4)
square(5)

-------------------------------------
Return Statement:
Function can take input values as parameters 
        and executes business logic,
  and returns output to the caller with return statement.
  
 Write a function to accept 2 numbers as input and return sum 

def add(x, y):
    return x+y


result = add(10, 20)
print("The sum is", result)
print("The sum is", add(100, 200))

If we are not writing return statement 
then default return value is None
def f1():
  print("Hello")
f1()
print(f1())  # None

# function to check  number is even or odd
def even_odd(num):
    if num % 2 == 0:
        print(num, "is Even Number")
    else:
        print(num, "is Odd Number")


even_odd(10)

# function to find factorial of given number
def fact(num):
    result = 1
    while num >= 1:
        result = result*num
        num = num - 1
    return result


for i in range(1, 5):
    print("The factorial of", i, "is:", fact(i))

	
Returning multiple values from a function:
	In other languages like C,C++ and Java, 
	function can return atmost one value. 
	But in Python, a function can 
	return any number of values.
Eg 1:
def math(a, b):
    add = a+b
    sub = a-b
    return add, sub


x, y = math(100, 50)
print("The add is :", x)
print("The Subtraction is :", y)


def calc(a, b):
    add = a+b
    sub = a-b
    mul = a*b
    div = a/b
    return add, sub, mul, div


t = calc(100, 50)
print("The Results are")
for i in t:
    print(i)
-----------------------------------------------------------------------------------
Types of arguments
def f1(a,b):
	------
	------
	------ 
f1(10,20)

a,b are formal arguments (parameters)
where as 10,20 are actual arguments 
There are 4 types are actual arguments are allowed in Python.
	1.positional arguments
	2.keyword arguments
	3.default arguments
	4.Variable length arguments
	
1.positional arguments:
   These are the arguments passed to function in 
   correct positional order
   
# positional arguments
def sub(a, b):
    print(a-b)


sub(100, 200)
sub(200, 100)

	The number of arguments and position of arguments must be 
	matched.
	If we change the order then result may be changed.
   If we change the number of arguments then we will get error.
   
2.keyword arguments:	
   We can pass argument values by keyword 
   i.e by parameter name.

# keyword arguments:
def wish(name, msg):
    print("Hello", name, msg)


wish(name="Anu", msg="Good Morning")
wish(msg="Good Morning", name="Anu")	  
	

Here the order of arguments is not important 
but number of arguments must be matched.

We can use both positional and keyword arguments 
simultaneously.
 But first we have to take positional arguments 
 and then keyword arguments,
 otherwise we will get syntaxerror. 

def wish(name, msg):
    print("Hello", name, msg)


wish("anu", "GoodMorning")
wish("anu", msg="GoodMorning")
# wish(name="anu","GoodMorning")


3.Default Arguments:
Sometimes we can provide default values for 
our positional arguments. 
 
#Default Arguments:
def wish(name="Guest"):
    print("Hello", name, "Good Morning")


wish("anu")    
wish()
 
 If we are not passing any name 
 then only default value will be considered.

Note:
After default arguments we should 
not take non default arguments

def wish(name="Guest",msg="Good Morning"):
    pass
    
def wish(name,msg="Good Morning"):
    pass

def wish(name="Guest", msg):
  pass

==>Invalid SyntaxError: non-default argument follows
 default argument


4.Variable length arguments:
Sometimes we can pass variable number of arguments to 
our function,such type of arguments 
are called variable length arguments.

We can declare a variable length argument 
with * symbol as follows 
   def f1(*n):
We can call this function by passing 
   any number of arguments including zero number. 
Internally all these values represented in the form of tuple.

#Variable length arguments:
def math(*n):
    total = 0
    for n1 in n:
        total = total+n1
    print("The Sum=", total)


math()
math(10)
math(10, 20)
math(10, 20, 30, 40)

We can mix variable length arguments 
with positional arguments.

def f1(n1, *s):
     print(n1)
	 for s1 in s: 
	    print(s1)
f1(10)
f1(10, 20, 30, 40)
f1(10,"A",30,"B")

	 output
	 10
	 10
	 20
	 30
	 40
	 10
	 A
	 30
	 B

 After variable length argument,
 if we are taking any other arguments 
 then we should provide values as keyword arguments.

def f1(*s, n1):
    for s1 in s:
        print(s1)
        print(n1)


f1("A", "B", n1=10)

	output
	A
	B 
	10
	
f1("A","B",10) ==>Invalid
TypeError: f1() missing 
1 required keyword-only argument: 'n1'


 We can declare key word variable length arguments also. 
 
 For this we have to use **.
	def f1(**n):
	
 We can call this function 
 by passing any number of keyword arguments. 
 Internally these keyword arguments will be stored 
 inside a dictionary.
 
def display(**kwargs):
    for k, v in kwargs.items():
        print(k, "=", v)
        

display(n1=10, n2=20, n3=30)
display(rno=100, name="anu", marks=70, subject="python")

	output
	 n1 = 10
	 n2 = 20
	 n3 = 30
	 rno = 100
	 name = Durga
	 marks = 70
	 subject = Java

Case Study:
def f(arg1, arg2, arg3=4, arg4=8):
    print(arg1, arg2, arg3, arg4)


f(3, 2)
f(10, 20, 30, 40)
f(25, 50, arg4=100)
f(arg4=2, arg1=3, arg2=4)
f()
f(arg3=10, arg4=20, 30, 40)
f(4, 5, arg2=6)
f(4, 5, arg3=5, arg5=6)

1. f(3,2) ==>	3 2 4 8
2. f(10,20,30,40) ===>10 20 30 40
3. f(25,50,arg4=100) ==>25 50 4 100
4. f(arg4=2,arg1=3,arg2=4)===>3 4 4 2
5.f()===>Invalid
	TypeError: f() missing 2 required 
	 positional arguments: 'arg1' and 'arg2'
6. f(arg3=10,arg4=20,30,40)	==>Invalid
	SyntaxError: positional argument  
	follows keyword argument
	[After keyword arguments we should 
	not take positional arguments]

7. f(4,5,arg2=6)==>Invalid
	TypeError: f() got multiple values 
	for argument 'arg2'

8. f(4,5,arg3=5,arg5=6)==>Invalid
	TypeError: f() got an unexpected 
	keyword argument 'arg5'


Note: Function vs Module vs Library:

1.A group of lines with some name is 
called a function
2.A group of functions saved to a file ,
 is called Module
3.A group of Modules is nothing but Library


Recursive Functions
A function that calls itself is known 
as Recursive Function.
factorial(3)=3*factorial(2)
=3*2*factorial(1)
=3*2*1*factorial(0)
=3*2*1*1
=6
factorial(n)= n*factorial(n-1)

The main advantages of recursive functions are:
1.We can reduce length of the code
 and improves readability
2.We can solve complex 
problems very easily.


# Function to find factorial with recursion
def factorial(n):
    if n == 0:
        result = 1
    else:
        result = n*factorial(n-1)
    return result


print("Factorial of 4 is :", factorial(4))
print("Factorial of 5 is :", factorial(5))

Anonymous Functions (lambda functions):
Sometimes we can declare a function 
without any name,such type 
of nameless functions are called 
anonymous functions or lambda functions.

The main purpose of anonymous function 
is just for instant use(i.e for one time usage)


Normal Function:

We can define by using def keyword.
def square(n):
    return n*n


print(square(4))

lambda Function:
We can define by using lambda keyword 
lambda n:n*n

Syntax of lambda Function:
lambda argument_list : expression

By using Lambda Functions 
we can write very concise code 

so that readability of the program will be improved.

# lambda function to find square of number
s = lambda n: n*n
print("The Square of 4 is :", s(4))
print("The Square of 5 is :", s(5))

# Lambda function to find sum of 2 given numbers
s = lambda a, b: a + b
print("The Sum of 10,20 is:", s(10, 20))

#  Lambda Function to find greatest values.
s = lambda a, b: a if a > b else b
print("The Biggest of 100,200 is:", s(100, 200))
print("The Biggest of 10,20 is:", s(10, 20))

Lambda Function internally returns expression value 
and we are not required to write 
return statement explicitly.


We can pass function as argument to another function
  Eg: filter(function,sequence) 
	  map(function,sequence)
	  reduce(function,sequence)
	  
	  
 Sometimes we can pass function as argument
 to another function. 
 In such cases lambda functions are best choice.

We can use lambda functions very 
commonly with filter(),map() and reduce() functions
,b'z these functions expect function as argument.

filter() function:
 to filter values from the given 
 sequence based on some condition.
 filter(function,sequence)
 where function argument is responsible
 to perform conditional check 
 sequence can be list or tuple or string.

# filter only even numbers from the list
# by using filter() function?

#without lambda Function:
def Even(x):
    if x % 2 == 0:
        return True
    else:
        return False


l = [0, 5, 10, 15, 20, 25, 30]
l1 = list(filter(Even, l))
print(l1)

# with lambda Function:
l = [0, 5, 10, 15, 20, 25, 30]
l1 = list(filter(lambda x: x % 2 == 0, l))
print(l1)
l2 = list(filter(lambda x: x % 2 != 0, l))
print(l2)



map() function:
For every element present in the given sequence,
apply some functionality and 
generate new element with the required modification.
 For this requirement we should go for map() function.
 
 # For every element present in the list perform
# double and generate new list of doubles.

Syntax:
map(function,sequence)
The function can be applied 
on each element of sequence 
and generates new sequence.

# For every element present in the list perform
# double and generate new list of doubles.
# Without lambda
def double(x):
    return 2*x


l = [1, 2, 3, 4, 5]
l1 = list(map(double, l))
print(l1)

# with lambda
l = [1, 2, 3, 4, 5]
l1 = list(map(lambda x: 2*x, l))
print(l1)

l2 = list(map(lambda x: x*x, l))
print(l2)


We can apply map() function on multiple lists also.
But make sure all list should have same length.

Syntax: map(lambda x,y:x*y,l1,l2)) 
x is from l1 and y is from l2

l1 = [1, 2, 3, 4]
l2 = [2, 3, 4, 5]
l3 = list(map(lambda x, y: x*y, l1, l2))
print(l3)
 

reduce() function:

reduce() function reduces sequence of elements 
into a single element by applying the specified function.

reduce(function,sequence)

reduce() function present in functools module 
and hence we should write import statement.

from functools import *
l = [10, 20, 30, 40, 50]
result = reduce(lambda x, y: x+y, l)
print(result)

result = reduce(lambda x, y: x*y, l)
print(result)

from functools import *
result = reduce(lambda x, y: x+y, range(1, 101))
print(result)




In Python every thing is treated as object.
Even functions also internally treated as objects only.

def f1():
    print("Hello")


print(f1)
print(id(f1))


Function Aliasing:
For the existing function we can give another name,
 which is nothing but function aliasing.
 
def wish(name):
    print("Good Morning:", name)


greet = wish
print(id(wish))
print(id(greet))
greet("Anu")
wish("Anu")

Note: In the above example only one function is available
 but we can call that function by using either 
 wish name or greeting name.
If we delete one name still 
we can access that function by using alias name

del wish
# wish("Anu")
greet("Anu")


Nested Functions:
We can declare a function inside another function,
 such type of functions are called Nested functions.
 

def outer():
    print("outer function started")

    def inner():
        print("inner function execution")
    print("outer function calling inner function")
    inner()


outer()
#inner()

#inner()	==>NameError: name 'inner' is not defined

inner() function is local to outer() function and 
hence it is not possible to call directly 
from outside of outer() function.


Note: A function can return another function.

def outer():
    print("outer function started")

    def inner():
        print("inner function execution")
    print("outer function returning inner function")
    return inner


f1 = outer()
f1()
f1()
f1()



 What is the differenece between the following lines?
 	f1 = outer
 	f1 = outer()
	
In the first case for the outer() function 
we are providing another name f1(function aliasing).

But in the second case we calling outer() function,
which returns inner function.
For that inner function() we are providing another name f1


We can pass function as argument to another function
  Eg: filter(function,sequence) 
	  map(function,sequence)
	  reduce(function,sequence)


